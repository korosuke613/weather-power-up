{"version":3,"sources":["../js/modules/util.js","../js/modules/api.js","../js/modules/conditions-map.js","../js/modules/localizationSettings.js","../js/connector.js"],"names":["defaultUnitForLocale","locale","celsiusToFahrenheit","celsius","kphToMph","kph","API_BASE","Promise","window","TrelloPowerUp","clearCache","t","memberCanWriteToModel","remove","getCachedData","all","card","get","then","cache","coordinates","expires","Date","now","latitude","longitude","location","weather","cacheWeatherData","weatherData","set","weatherRequests","Map","fetchWeatherData","lang","idCard","getContext","has","weatherRequest","delete","fetch","units","response","json","temp","main","wind","speed","conditions","id","icon","getConditionKey","defaultLocale","supportedLocales","resourceUrl","REFRESH_INTERVAL","showBadge","command","type","prefs","Error","getWeatherBadges","opts","tempBadge","dynamic","trello","toFixed","title","localizeKey","text","refresh","windBadge","windSpeed","conditionsBadge","conditionKey","badges","forEach","badge","push","initialize","popup","url","height","localization","localizationSettings"],"mappings":"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","file":"connector.bc243f4a.js","sourceRoot":"../src/html","sourcesContent":["export function defaultUnitForLocale(locale) {\n  if (locale === 'en-US') {\n    return 'imperial';\n  }\n  return 'metric';\n}\n\nexport function celsiusToFahrenheit(celsius) {\n  return celsius * 1.8 + 32;\n}\n\nexport function kphToMph(kph) {\n  return kph * 0.62;\n}\n","// %%APP_ID%% is our openweathermapp appid which we store in an environment variable\nconst API_BASE = 'https://api.openweathermap.org/data/2.5/weather?appid=7472966776b91c344addade468207e40';\nconst { Promise } = window.TrelloPowerUp;\n\nconst clearCache = t => {\n  if (t.memberCanWriteToModel('card')) {\n    t.remove('card', 'shared', 'cache');\n  }\n};\n\nconst getCachedData = t =>\n  Promise.all([t.card('coordinates'), t.get('card', 'shared', 'cache')]).then(([card, cache]) => {\n    if (!cache) {\n      // nothing cached at the moment\n      return null;\n    }\n    if (!card.coordinates) {\n      // this card doesn't have a location, let's clear anything we may have cached\n      clearCache(t);\n      return null;\n    }\n    // this card does have coordinates and has some cached data\n    if (!cache.expires || cache.expires <= Date.now()) {\n      // the cached data has expired, we shouldn't use it\n      clearCache(t);\n      return null;\n    }\n    // the cache is still relevant (hasn't expired yet)\n    const { latitude, longitude } = card.coordinates;\n    const location = `${latitude}:${longitude}`;\n    if (!cache.location || cache.location !== location) {\n      // the location we have cached doesn't match the location of the card\n      clearCache(t);\n      return null;\n    }\n    // everything checks out, we have good cached data we can use\n    return cache.weather;\n  });\n\nconst cacheWeatherData = (t, coordinates, weatherData) => {\n  // we can only cache it if the current Trello member has write access\n  if (t.memberCanWriteToModel('card')) {\n    const { latitude, longitude } = coordinates;\n    const location = `${latitude}:${longitude}`;\n    t.set('card', 'shared', {\n      cache: {\n        expires: Date.now() + 1000 * 60 * 30, // 30 minutes in the future\n        location,\n        weather: weatherData,\n      },\n    });\n  }\n};\n\n// we don't want to accidentally make three requests to the weather API per card\n// instead we will hold onto and reuse promises based on the id of the card\nconst weatherRequests = new Map();\n\nexport default function fetchWeatherData(t, lang = 'en') {\n  const idCard = t.getContext().card;\n  if (weatherRequests.has(idCard)) {\n    // we already have a request in progress for that card, let's reuse that\n    return weatherRequests.get(idCard);\n  }\n\n  const weatherRequest = Promise.all([t.card('coordinates'), getCachedData(t)]).then(\n    ([card, cache]) => {\n      if (!card.coordinates) {\n        weatherRequests.delete(idCard);\n        return null;\n      }\n\n      const { latitude, longitude } = card.coordinates;\n      if (cache) {\n        weatherRequests.delete(idCard);\n        return cache;\n      }\n\n      // our card has a location, let's fetch the current weather\n      const units = 'metric';\n      // see: https://openweathermap.org/weather-data for more parameters\n      return fetch(`${API_BASE}&units=${units}&lang=${lang}&lat=${latitude}&lon=${longitude}`)\n        .then(response => response.json())\n        .then(weatherData => {\n          // we only care about a bit of the data\n          const weather = {};\n          weather.temp = weatherData.main.temp;\n          weather.wind = weatherData.wind.speed;\n          weather.conditions = weatherData.weather[0].id;\n          weather.icon = weatherData.weather[0].icon;\n          cacheWeatherData(t, card.coordinates, weather);\n          weatherRequests.delete(idCard);\n          return weather;\n        });\n    }\n  );\n\n  // store the outstanding request so it can be reused\n  weatherRequests.set(idCard, weatherRequest);\n  return weatherRequest;\n}\n","// according to https://openweathermap.org/weather-conditions\nexport default function getConditionKey(id) {\n  if (id >= 200 && id < 300) {\n    return 'thunderstorm';\n  }\n  if (id < 400) {\n    return 'drizzle';\n  }\n  if (id >= 500 && id < 600) {\n    return 'rain';\n  }\n  if (id >= 600 && id < 700) {\n    return 'snow';\n  }\n  if (id === 701) {\n    return 'mist';\n  }\n  if (id === 711) {\n    return 'smoke';\n  }\n  if (id === 721) {\n    return 'haze';\n  }\n  if (id === 731) {\n    return 'dust';\n  }\n  if (id === 741) {\n    return 'fog';\n  }\n  if (id === 751) {\n    return 'sand';\n  }\n  if (id === 761) {\n    return 'dust';\n  }\n  if (id === 762) {\n    return 'ash';\n  }\n  if (id === 771) {\n    return 'squall';\n  }\n  if (id === 781) {\n    return 'tornado';\n  }\n  if (id === 800) {\n    return 'clear';\n  }\n  if (id > 800 && id < 810) {\n    return 'clouds';\n  }\n  return null;\n}\n","export default {\n  defaultLocale: 'en',\n  supportedLocales: [\n    'cs',\n    'de',\n    'en',\n    'es',\n    'fi',\n    'fr',\n    'hu',\n    'it',\n    'ja',\n    'nb',\n    'nl',\n    'pl',\n    'pt-BR',\n    'ru',\n    'sv',\n    'th',\n    'tr',\n    'uk',\n    'vi',\n    'zh-Hans',\n    'zh-Hant',\n  ],\n  resourceUrl: './{locale}.json',\n};\n","import { defaultUnitForLocale, celsiusToFahrenheit, kphToMph } from './modules/util';\nimport fetchWeatherData from './modules/api';\nimport getConditionKey from './modules/conditions-map';\nimport localizationSettings from './modules/localizationSettings';\n\nconst { Promise } = window.TrelloPowerUp;\nconst REFRESH_INTERVAL = 1800; // 30 minutes in seconds\n\nconst showBadge = (command, type, prefs) => {\n  if (command === 'card-badges') {\n    return prefs[`${type}-front`] !== false;\n  }\n  if (command === 'card-detail-badges') {\n    return prefs[`${type}-back`] !== false;\n  }\n\n  throw new Error('Unknown command', command);\n};\n\nconst getWeatherBadges = (t, opts) =>\n  Promise.all([\n    t.card('coordinates'),\n    t.get('member', 'private', 'units', defaultUnitForLocale(opts.locale)),\n    t.get('board', 'shared'),\n  ]).then(([card, units, prefs]) => {\n    if (!card.coordinates) {\n      // if the card doesn't have a location at all, we won't show any badges\n      return [];\n    }\n\n    const tempBadge = {\n      dynamic(trello) {\n        return fetchWeatherData(trello).then(weatherData => {\n          let { temp } = weatherData;\n          if (units === 'metric') {\n            temp = `${temp.toFixed()} °C`;\n          } else {\n            temp = `${celsiusToFahrenheit(temp).toFixed()} °F`;\n          }\n          return {\n            title: trello.localizeKey('temperature'),\n            text: temp,\n            refresh: REFRESH_INTERVAL,\n          };\n        });\n      },\n    };\n\n    const windBadge = {\n      dynamic(trello) {\n        return fetchWeatherData(trello).then(weatherData => {\n          let windSpeed = weatherData.wind;\n          if (units === 'metric') {\n            windSpeed = `🌬️ ${windSpeed.toFixed()} kph`;\n          } else {\n            windSpeed = `🌬️ ${kphToMph(windSpeed).toFixed()} mph`;\n          }\n          return {\n            title: trello.localizeKey('wind-speed'),\n            text: windSpeed,\n            refresh: REFRESH_INTERVAL,\n          };\n        });\n      },\n    };\n\n    const conditionsBadge = {\n      dynamic(trello) {\n        return fetchWeatherData(trello).then(weatherData => {\n          const conditionKey = getConditionKey(weatherData.conditions);\n          return {\n            title: trello.localizeKey('conditions'),\n            icon: `https://openweathermap.org/img/w/${weatherData.icon}.png`,\n            text: conditionKey ? trello.localizeKey(conditionKey) : '',\n            refresh: REFRESH_INTERVAL,\n          };\n        });\n      },\n    };\n\n    let badges = [];\n\n    if (!prefs || typeof prefs !== 'object') {\n      // default to all badges\n      badges = [tempBadge, windBadge, conditionsBadge];\n    } else {\n      // there are some potential preferences\n      [\n        ['temp', tempBadge],\n        ['wind', windBadge],\n        ['conditions', conditionsBadge],\n      ].forEach(([type, badge]) => {\n        if (showBadge(t.getContext().command, type, prefs)) {\n          badges.push(badge);\n        }\n      });\n    }\n\n    return badges;\n  });\n\nwindow.TrelloPowerUp.initialize(\n  {\n    'card-badges': getWeatherBadges,\n    'card-detail-badges': getWeatherBadges,\n    'show-settings': t => {\n      return t.popup({\n        title: t.localizeKey('weather-settings'),\n        url: './settings.html',\n        height: 281,\n      });\n    },\n  },\n  {\n    localization: localizationSettings,\n  }\n);\n"]}