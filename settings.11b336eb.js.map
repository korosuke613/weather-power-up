{"version":3,"sources":["../js/modules/util.js","../js/modules/localizationSettings.js","../js/settings.js"],"names":["defaultUnitForLocale","locale","celsiusToFahrenheit","celsius","kphToMph","kph","defaultLocale","supportedLocales","resourceUrl","t","window","TrelloPowerUp","iframe","localization","localizationSettings","document","querySelectorAll","forEach","radioBtn","addEventListener","e","set","target","value","checkbox","checked","remove","render","localizeNode","body","getAll","then","data","unitPreference","member","private","units","unitBtn","querySelector","board","shared","sizeTo"],"mappings":";AAaC,aAbM,SAASA,EAAqBC,GAC/BA,MAAW,UAAXA,EACK,WAEF,SAGF,SAASC,EAAoBC,GAC3BA,OAAU,IAAVA,EAAgB,GAGlB,SAASC,EAASC,GAChBA,MAAM,IAANA,EACR,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,SAAA;;ACbc,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,IAAA,EAAA,CACbC,cAAe,KACfC,iBAAkB,CAChB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,UACA,WAEFC,YAAa,mBAzBA,QAAA,QAAA;;ACyBf,aAzBA,IAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,mCAwBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtBA,IAAMC,EAAIC,OAAOC,cAAcC,OAAO,CACpCC,aAAcC,EAAAA,UAIhBC,SAASC,iBAAiB,iCAAiCC,QAAQ,SAAAC,GACjEA,EAASC,iBAAiB,SAAU,SAAAC,GAClCX,EAAEY,IAAI,SAAU,UAAW,QAASD,EAAEE,OAAOC,WAKjDR,SAASC,iBAAiB,wBAAwBC,QAAQ,SAAAO,GACxDA,EAASL,iBAAiB,SAAU,SAAAC,GAC9BA,EAAEE,OAAOG,QACXhB,EAAEiB,OAAO,QAAS,SAAUN,EAAEE,OAAOC,OAErCd,EAAEY,IAAI,QAAS,SAAUD,EAAEE,OAAOC,OAAO,OAK/Cd,EAAEkB,OAAO,WAEAlB,OADPA,EAAEmB,aAAab,SAASc,MACjBpB,EAAEqB,SAASC,KAAK,SAAAC,GAEjBC,IAAAA,GAAiB,EAAqBvB,EAAAA,sBAAAA,OAAOT,QAC7C+B,GAAQA,EAAKE,QAAUF,EAAKE,OAAOC,SAAWH,EAAKE,OAAOC,QAAQC,QACpEH,EAAiBD,EAAKE,OAAOC,QAAQC,OAEjCC,IAAAA,EAAUtB,SAASuB,cAAyCL,2BAAAA,OAAAA,EAAlE,MACII,IACFA,EAAQZ,SAAU,GAGpBV,SAASC,iBAAiB,wBAAwBC,QAAQ,SAAAO,GAEpDQ,GAAQA,EAAKO,OAASP,EAAKO,MAAMC,SAAgD,IAAtCR,EAAKO,MAAMC,OAAOhB,EAASD,OACxEC,EAASC,SAAU,EAEnBD,EAASC,SAAU,IAKvBhB,EAAEgC,OAAO1B,SAASc","file":"settings.11b336eb.js","sourceRoot":"../src/html","sourcesContent":["export function defaultUnitForLocale(locale) {\n  if (locale === 'en-US') {\n    return 'imperial';\n  }\n  return 'metric';\n}\n\nexport function celsiusToFahrenheit(celsius) {\n  return celsius * 1.8 + 32;\n}\n\nexport function kphToMph(kph) {\n  return kph * 0.62;\n}\n","export default {\n  defaultLocale: 'en',\n  supportedLocales: [\n    'cs',\n    'de',\n    'en',\n    'es',\n    'fi',\n    'fr',\n    'hu',\n    'it',\n    'ja',\n    'nb',\n    'nl',\n    'pl',\n    'pt-BR',\n    'ru',\n    'sv',\n    'th',\n    'tr',\n    'uk',\n    'vi',\n    'zh-Hans',\n    'zh-Hant',\n  ],\n  resourceUrl: './{locale}.json',\n};\n","import { defaultUnitForLocale } from './modules/util';\nimport localizationSettings from './modules/localizationSettings';\n\nconst t = window.TrelloPowerUp.iframe({\n  localization: localizationSettings,\n});\n\n// setup event listeners on radio buttons to save preferences when they change\ndocument.querySelectorAll('input[type=radio][name=units]').forEach(radioBtn => {\n  radioBtn.addEventListener('change', e => {\n    t.set('member', 'private', 'units', e.target.value);\n  });\n});\n\n// setup event listeners on the display settings checkboxes\ndocument.querySelectorAll('input[type=checkbox]').forEach(checkbox => {\n  checkbox.addEventListener('change', e => {\n    if (e.target.checked) {\n      t.remove('board', 'shared', e.target.value);\n    } else {\n      t.set('board', 'shared', e.target.value, false);\n    }\n  });\n});\n\nt.render(() => {\n  t.localizeNode(document.body);\n  return t.getAll().then(data => {\n    // select the currently selected unit preference\n    let unitPreference = defaultUnitForLocale(window.locale);\n    if (data && data.member && data.member.private && data.member.private.units) {\n      unitPreference = data.member.private.units;\n    }\n    const unitBtn = document.querySelector(`input[type=radio][value=${unitPreference}]`);\n    if (unitBtn) {\n      unitBtn.checked = true;\n    }\n    // select the currently selected display preferences\n    document.querySelectorAll('input[type=checkbox]').forEach(checkbox => {\n      /* eslint-disable no-param-reassign */\n      if (data && data.board && data.board.shared && data.board.shared[checkbox.value] === false) {\n        checkbox.checked = false;\n      } else {\n        checkbox.checked = true;\n      }\n      /* eslint-enable no-param-reassign */\n    });\n    // ensure that our popup is properly sized to fit our content\n    t.sizeTo(document.body);\n  });\n});\n"]}